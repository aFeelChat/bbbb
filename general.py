import os
import sqlite3
import logging
import nest_asyncio
import telegram
nest_asyncio.apply()

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import asyncio

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞
BOT_TOKEN = "7814500090:AAH8V_ZakvdPi_N7rNRaCHL20gPLGQYgHtI"
ADMIN_ID = 7801573997
BOT_USERNAME = "redpeakbot"  # –±–µ–∑ @
PUBLICATION_CHANNEL_ID = "@redpeaktj"  # –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è

# –≠–º–æ–¥–∑–∏
EMOJI_WAVE = "üëã"
EMOJI_ORDER = "üõí"
EMOJI_PHOTO = "üì∏"
EMOJI_LINK = "üîó"
EMOJI_PRICE = "üí∞"
EMOJI_OK = "‚úÖ"
EMOJI_CANCEL = "‚ùå"
EMOJI_INFO = "‚ÑπÔ∏è"
EMOJI_ADMIN = "üëë"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–∞
CHOOSING_CATEGORY, RECEIVING_NAME, RECEIVING_PHOTO, RECEIVING_PRODUCT_LINK, RECEIVING_PRICE, CONFIRMING_ORDER = range(6)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∞–¥–º–∏–Ω)
OFFER_RECEIVING_CATEGORY, OFFER_RECEIVING_PHOTO, OFFER_RECEIVING_PRODUCT_LINK, OFFER_RECEIVING_PRICE, OFFER_RECEIVING_DESCRIPTION, OFFER_CONFIRMATION = range(10, 16)
# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é
OFFER_ORDER_CONFIRM = 20

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–∞–∑–∞ (–∞–¥–º–∏–Ω)
admin_rejections = {}


keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]
nazad = InlineKeyboardMarkup(keyboard)

keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="all_orders_all")]]
orderss = InlineKeyboardMarkup(keyboard)

# ----------------- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î -----------------
def init_db():
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            category TEXT,
            product_name TEXT,
            photo_file_id TEXT,
            product_link TEXT,
            price TEXT,
            status TEXT,
            admin_comment TEXT
        )
    ''')
    cursor.execute("PRAGMA table_info(orders)")
    columns = [info[1] for info in cursor.fetchall()]
    if "product_name" not in columns:
        cursor.execute("ALTER TABLE orders ADD COLUMN product_name TEXT")
    conn.commit()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS offers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            admin_id INTEGER,
            category TEXT,
            photo_file_id TEXT,
            product_link TEXT,
            price TEXT,
            description TEXT
        )
    ''')
    conn.commit()
    conn.close()

# ----------------- –ê–¥–º–∏–Ω-–º–µ–Ω—é -----------------
async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤—ã–π"
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = ?", ("–ù–æ–≤—ã–π",))
    new_count = cursor.fetchone()[0]
    conn.close()

    message = f"{EMOJI_ADMIN} *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [InlineKeyboardButton(f"–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({new_count})", callback_data="new_orders_menu")],
        [InlineKeyboardButton("–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="all_orders_all")],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="create_ad")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", callback_data="search_orders")],
        [InlineKeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", callback_data="delete_orders_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text(message, parse_mode="Markdown", reply_markup=reply_markup)

# ------------- –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å "–ù–æ–≤—ã–π") -------------
async def new_orders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫", callback_data="new_orders_list"),
         InlineKeyboardButton("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", callback_data="new_orders_pag_0")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
    ]
    text = f"{EMOJI_ADMIN} –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:"
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_new_orders_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, user_id, username, first_name, category, product_name, product_link, price, status 
        FROM orders WHERE status = ?
    """, ("–ù–æ–≤—ã–π",))
    orders = cursor.fetchall()
    conn.close()
    if orders:
        text = f"{EMOJI_ORDER} *–°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:*\n\n"
        for order in orders:
            order_id, user_id, username, first_name, category, product_name, product_link, price, status = order
            text += (
                f"*–ó–∞–∫–∞–∑ #{order_id}:*\n"
                f"–ö–ª–∏–µ–Ω—Ç: {first_name} (@{username if username else '–Ω–µ—Ç username'})\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"{EMOJI_LINK} –°—Å—ã–ª–∫–∞: {product_link}\n"
                f"{EMOJI_PRICE} –¶–µ–Ω–∞: {price}\n\n"
            )
    else:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫."
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="new_orders_menu")]]
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def show_new_orders_pag(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status 
        FROM orders WHERE status = ?
    """, ("–ù–æ–≤—ã–π",))
    orders = cursor.fetchall()
    conn.close()
    total = len(orders)
    if total == 0:
        text = "–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="new_orders_menu")]]
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return
    if page < 0:
        page = 0
    if page >= total:
        page = total - 1
    order = orders[page]
    order_id, user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status = order
    caption = (
        f"{EMOJI_ORDER} *–ó–∞–∫–∞–∑ #{order_id}*\n"
        f"–ö–ª–∏–µ–Ω—Ç: {first_name} (@{username if username else '–Ω–µ—Ç username'})\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"{EMOJI_LINK} –°—Å—ã–ª–∫–∞: {product_link}\n"
        f"{EMOJI_PRICE} –¶–µ–Ω–∞: {price}\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞: {page+1}/{total}"
    )
    buttons = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
         InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{order_id}")]
    ]
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"new_orders_pag_{page-1}"))
    if page < total - 1:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"new_orders_pag_{page+1}"))
    if pagination_buttons:
        buttons.append(pagination_buttons)
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="new_orders_menu")])
    reply_markup = InlineKeyboardMarkup(buttons)
    if update.callback_query:
        try:
            await update.callback_query.edit_message_media(
                media=InputMediaPhoto(media=photo_file_id, caption=caption, parse_mode="Markdown"),
                reply_markup=reply_markup
            )
        except Exception:
            await update.callback_query.edit_message_text(text=caption, parse_mode="Markdown", reply_markup=reply_markup)
    else:
        await update.message.reply_photo(photo=photo_file_id, caption=caption, parse_mode="Markdown", reply_markup=reply_markup)

async def new_orders_pag_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_")[-1])
    await show_new_orders_pag(update, context, page)

# ------------- –í—Å–µ –∑–∞—è–≤–∫–∏ (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º) -------------
async def all_orders_all_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT user_id, username, first_name FROM orders")
    users = cursor.fetchall()
    conn.close()
    if not users:
        await query.edit_message_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    text = f"{EMOJI_ORDER} *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∑–∞—è–≤–∫–∞–º–∏:*\n\n"
    keyboard = []
    for user in users:
        user_id, username, first_name = user
        btn_text = f"{first_name} (@{username})" if username else f"{first_name} ({user_id})"
        keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"orders_by_user_{user_id}")])
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_main_menu")])
    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

ORDERS_PER_PAGE = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 1 –∑–∞–∫–∞–∑—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

async def show_orders_by_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    data_parts = query.data.split("_")
    user_id = data_parts[3]
    page = int(data_parts[4]) if len(data_parts) > 4 else 0

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, category, product_name, product_link, price, status, admin_comment 
        FROM orders WHERE user_id = ?
        ORDER BY id ASC
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()

    # –ï—Å–ª–∏ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç
    if not orders:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    total_orders = len(orders)
    total_pages = (total_orders + ORDERS_PER_PAGE - 1) // ORDERS_PER_PAGE  # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    page = max(0, min(page, total_pages - 1))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω –∑–∞–∫–∞–∑ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    order = orders[page]
    order_id, category, product_name, product_link, price, status, admin_comment = order

    text = (
        f"üìå *–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id})* | *{page + 1}/{total_pages}*\n\n"
        f"*–ó–∞–∫–∞–∑ #{order_id}:*\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {product_link}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {admin_comment}\n"
    )

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
    keyboard = [
        [InlineKeyboardButton(f"üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å #{order_id}", callback_data=f"change_status_{order_id}")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"note_order_{order_id}")]
    ]

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_by_user_{user_id}_{page-1}"))
    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"orders_by_user_{user_id}_{page+1}"))

    if pagination_buttons:
        keyboard.append(pagination_buttons)

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="all_orders_all")])

    await query.edit_message_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def change_status_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    order_id = query.data.split("_")[-1]
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    row = cursor.fetchone()
    conn.close()
    user_id = row[0] if row else ""
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—ã–π", callback_data=f"set_status_{order_id}_–ü—Ä–∏–Ω—è—Ç—ã–π"),
         InlineKeyboardButton("–î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"set_status_{order_id}_–î–æ—Å—Ç–∞–≤–∫–∞")],
        [InlineKeyboardButton("–ü—Ä–∏–±—ã–ª–æ", callback_data=f"set_status_{order_id}_–ü—Ä–∏–±—ã–ª–æ"),
         InlineKeyboardButton("–û—Ç–∫–∞–∑–∞–Ω", callback_data=f"set_status_{order_id}_–û—Ç–∫–∞–∑–∞–Ω")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"orders_by_user_{user_id}")]
    ]
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:"
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def set_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    parts = query.data.split("_")
    order_id = parts[2]
    new_status = "_".join(parts[3:])
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET status = ? WHERE id = ?", (new_status, order_id))
    # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    row = cursor.fetchone()
    conn.commit()
    conn.close()

    

    await query.edit_message_text(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.", reply_markup=nazad)
    if row:
        user_id = row[0]
        await context.bot.send_message(chat_id=user_id, text=f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id, user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'.")

# ------------- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –∫ –∑–∞–∫–∞–∑—É -------------
async def note_order_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    order_id = query.data.split("_")[-1]
    context.user_data["note_order"] = order_id
    await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}:")

async def note_order_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order_id = context.user_data.pop("note_order", None)
    if not order_id:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.")
        return
    note = update.message.text
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE orders SET admin_comment = ? WHERE id = ?", (note, order_id))
    # –ü–æ–ª—É—á–∞–µ–º user_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    row = cursor.fetchone()
    conn.commit()
    conn.close()
    await update.message.reply_text(f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=orderss)
    if row:
        user_id = row[0]
        await context.bot.send_message(chat_id=user_id, text=f"–í –≤–∞—à –∑–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–º–µ—Ç–∫–∞: {note}")

# ------------- –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫ -------------
async def search_orders_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["admin_search"] = True
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å:")

async def admin_search_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query_text = update.message.text
    context.user_data["admin_search"] = False
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, user_id, username, first_name, category, product_name, product_link, price, status
        FROM orders
        WHERE product_name LIKE ? OR category LIKE ?
    """, (f"%{query_text}%", f"%{query_text}%"))
    results = cursor.fetchall()
    conn.close()
    if results:
        text = f"{EMOJI_ORDER} *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        for order in results:
            order_id, user_id, username, first_name, category, product_name, product_link, price, status = order
            text += (
                f"*–ó–∞–∫–∞–∑ #{order_id}:*\n"
                f"–ö–ª–∏–µ–Ω—Ç: {first_name} (@{username if username else '–Ω–µ—Ç username'})\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"{EMOJI_LINK} –°—Å—ã–ª–∫–∞: {product_link}\n"
                f"{EMOJI_PRICE} –¶–µ–Ω–∞: {price}\n\n"
            )
        keyboard = []
        for order in results:
            order_id = order[0]
            btn_status = InlineKeyboardButton(f"–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å #{order_id}", callback_data=f"change_status_{order_id}")
            btn_note = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"note_order_{order_id}")
            keyboard.append([btn_status, btn_note])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_main_menu")])
    else:
        text = "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("admin_search"):
        await admin_search_handler(update, context)
    elif "note_order" in context.user_data:
        await note_order_received(update, context)
    elif update.effective_user.id in admin_rejections:
        await rejection_reason_admin(update, context)

# ------------- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------
async def my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, category, product_name, product_link, price, status, admin_comment 
        FROM orders WHERE user_id = ?
    """, (user_id,))
    orders = cursor.fetchall()
    conn.close()
    if orders:
        text = f"{EMOJI_ORDER} *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:*\n\n"
        for order in orders:
            order_id, category, product_name, product_link, price, status, comment = order
            comment_text = f"üìù –ó–∞–º–µ—Ç–∫–∞: {comment}\n" if comment else ""
            text += (
                f"*üë§ –ó–∞–∫–∞–∑ {user_id}{order_id}:*\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"{EMOJI_LINK} –°—Å—ã–ª–∫–∞: {product_link}\n"
                f"{EMOJI_PRICE} –¶–µ–Ω–∞: {price}\n"
                f"üì¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                f"{comment_text}\n"
            )

    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode="Markdown")
    else:
        await update.message.reply_text(text, parse_mode="Markdown")

# ------------- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º -------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id == ADMIN_ID:
        await admin_main_menu(update, context)
        return

    args = context.args
    if args and args[0].startswith("offer_"):
        offer_id = args[0].split("_", 1)[1]
        conn = sqlite3.connect("orders.db")
        cursor = conn.cursor()
        cursor.execute("SELECT category, photo_file_id, product_link, price, description FROM offers WHERE id = ?", (offer_id,))
        offer = cursor.fetchone()
        conn.close()
        if offer:
            category, photo_file_id, product_link, price, description = offer
            context.user_data['order_data'] = {
                'category': category,
                'photo_file_id': photo_file_id,
                'product_link': product_link,
                'price': price,
                'offer_id': offer_id,
                'is_offer': True
            }
            summary = (
                f"{EMOJI_ORDER} *–ü–æ–¥—ã—Ç–æ–∂–∏–º –∑–∞–∫–∞–∑ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é:*\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"‚Ä¢ {EMOJI_LINK} –°—Å—ã–ª–∫–∞: {product_link}\n"
                f"‚Ä¢ {EMOJI_PRICE} –¶–µ–Ω–∞: {price}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
            )
            keyboard = [
                [InlineKeyboardButton(f"{EMOJI_OK} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order_offer"),
                 InlineKeyboardButton(f"{EMOJI_CANCEL} –û—Ç–º–µ–Ω–∞", callback_data="cancel_order_offer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(summary, parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    keyboard = [
        [InlineKeyboardButton("üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="new_order")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = f"{EMOJI_WAVE} –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def new_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    return await order_start(update, context)

async def my_orders_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await my_orders(update, context)

async def order_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚ö°", callback_data="category_–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"),
         InlineKeyboardButton("–û–¥–µ–∂–¥–∞ üëó", callback_data="category_–û–¥–µ–∂–¥–∞")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç—ã üçé", callback_data="category_–ü—Ä–æ–¥—É–∫—Ç—ã"),
         InlineKeyboardButton("–î—Ä—É–≥–æ–µ üîß", callback_data="category_–î—Ä—É–≥–æ–µ")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data.pop('order_data', None)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    return CHOOSING_CATEGORY

async def category_chosen_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, category = query.data.split("_", 1)
    if 'order_data' not in context.user_data:
        context.user_data['order_data'] = {}
    context.user_data['order_data']['category'] = category
    await query.edit_message_text(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{category}*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode="Markdown"
    )
    return RECEIVING_NAME

async def name_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if 'order_data' not in context.user_data:
        context.user_data['order_data'] = {}
    context.user_data['order_data']['product_name'] = text
    await update.message.reply_text(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: *{text}*\n\n{EMOJI_PHOTO} –ü—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.",
        parse_mode="Markdown"
    )
    return RECEIVING_PHOTO

async def photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        if 'order_data' not in context.user_data:
            context.user_data['order_data'] = {}
        context.user_data['order_data']['photo_file_id'] = file_id
        await update.message.reply_text(f"{EMOJI_LINK} –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä.")
        return RECEIVING_PRODUCT_LINK
    await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
    return RECEIVING_PHOTO

async def product_link_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'order_data' not in context.user_data:
        context.user_data['order_data'] = {}
    context.user_data['order_data']['product_link'] = update.message.text
    await update.message.reply_text(f"{EMOJI_PRICE} –£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1999.99):")
    return RECEIVING_PRICE

async def price_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'order_data' not in context.user_data:
        context.user_data['order_data'] = {}
    context.user_data['order_data']['price'] = update.message.text
    data = context.user_data['order_data']
    summary = (
        f"{EMOJI_ORDER} *–ü–æ–¥—ã—Ç–æ–∂–∏–º –≤–∞—à –∑–∞–∫–∞–∑:*\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('product_name')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"‚Ä¢ {EMOJI_LINK} –°—Å—ã–ª–∫–∞: {data.get('product_link')}\n"
        f"‚Ä¢ {EMOJI_PRICE} –¶–µ–Ω–∞: {data.get('price')}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
    )
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI_OK} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
         InlineKeyboardButton(f"{EMOJI_CANCEL} –û—Ç–º–µ–Ω–∞", callback_data="cancel_order")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, parse_mode="Markdown", reply_markup=reply_markup)
    return CONFIRMING_ORDER

async def confirm_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = context.user_data.get('order_data')
    if not data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status, admin_comment)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        update.effective_user.id,
        update.effective_user.username,
        update.effective_user.first_name,
        data.get('category'),
        data.get('product_name'),
        data.get('photo_file_id'),
        data.get('product_link'),
        data.get('price'),
        "–ù–æ–≤—ã–π",
        ""
    ))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()

    await query.edit_message_text("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    caption = (
        f"{EMOJI_ORDER} *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {update.effective_user.first_name} (@{update.effective_user.username})\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('product_name')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"‚Ä¢ {EMOJI_LINK} –°—Å—ã–ª–∫–∞: {data.get('product_link')}\n"
        f"‚Ä¢ {EMOJI_PRICE} –¶–µ–Ω–∞: {data.get('price')}"
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
         InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{order_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=data.get('photo_file_id'),
        caption=caption,
        parse_mode="Markdown",
        reply_markup=reply_markup
    )
    context.user_data.pop('order_data', None)
    return ConversationHandler.END

def get_order_title(user, order_id=None):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É—è UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ order_id –ø–µ—Ä–µ–¥–∞–Ω, –µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è.
    """
    title = f"–ó–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è UID: {user.id}"
    if order_id:
        title += f" (ID –∑–∞–∫–∞–∑–∞: {order_id})"
    return title

def get_user_profile_link(user):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è tg-—Å—Å—ã–ª–∫–∞.
    """
    if user.username:
        return f"https://t.me/{user.username}"
    else:
        return f"tg://user?id={user.id}"

# 
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (confirm_order_callback):
async def confirm_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = context.user_data.get('order_data')
    if not data:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ConversationHandler.END

    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO orders (user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status, admin_comment)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        update.effective_user.id,
        update.effective_user.username,
        update.effective_user.first_name,
        data.get('category'),
        data.get('product_name'),
        data.get('photo_file_id'),
        data.get('product_link'),
        data.get('price'),
        "–ù–æ–≤—ã–π",
        ""
    ))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order_title = get_order_title(update.effective_user, order_id)
    profile_link = get_user_profile_link(update.effective_user)

    await query.edit_message_text("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    caption = (
        f"{EMOJI_ORDER} <b>{order_title}</b>\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: <a href=\"{profile_link}\">{update.effective_user.first_name}</a>\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('product_name')}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"‚Ä¢ {EMOJI_LINK} –°—Å—ã–ª–∫–∞: {data.get('product_link')}\n"
        f"‚Ä¢ {EMOJI_PRICE} –¶–µ–Ω–∞: {data.get('price')}"
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{order_id}"),
         InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"reject_{order_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=data.get('photo_file_id'),
        caption=caption,
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    context.user_data.pop('order_data', None)
    return ConversationHandler.END


# 
# 4

async def cancel_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    context.user_data.pop('order_data', None)
    await query.edit_message_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.")
    return ConversationHandler.END

async def confirm_order_offer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await confirm_order_callback(update, context)

async def cancel_order_offer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cancel_order_callback(update, context)

# ------------- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∞–¥–º–∏–Ω) -------------
async def offer_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùó –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        elif update.callback_query:
            await update.callback_query.answer("‚ùó –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return ConversationHandler.END
    keyboard = [
        [InlineKeyboardButton("–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ ‚ö°", callback_data="offer_category_–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"),
         InlineKeyboardButton("–û–¥–µ–∂–¥–∞ üëó", callback_data="offer_category_–û–¥–µ–∂–¥–∞")],
        [InlineKeyboardButton("–ü—Ä–æ–¥—É–∫—Ç—ã üçé", callback_data="offer_category_–ü—Ä–æ–¥—É–∫—Ç—ã"),
         InlineKeyboardButton("–î—Ä—É–≥–æ–µ üîß", callback_data="offer_category_–î—Ä—É–≥–æ–µ")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    return OFFER_RECEIVING_CATEGORY

async def offer_category_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, _, category = query.data.split("_", 2)
    context.user_data['offer'] = {'category': category}
    await query.edit_message_text(text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n\n{EMOJI_PHOTO} –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.", parse_mode="Markdown")
    return OFFER_RECEIVING_PHOTO

async def offer_photo_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
        context.user_data['offer']['photo_file_id'] = file_id
        await update.message.reply_text(f"{EMOJI_ORDER} –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        return OFFER_RECEIVING_PRODUCT_LINK
    await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞.")
    return OFFER_RECEIVING_PHOTO

async def offer_product_link_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['offer']['product_link'] = update.message.text
    await update.message.reply_text(f"{EMOJI_PRICE} –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1999.99):")
    return OFFER_RECEIVING_PRICE

async def offer_price_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['offer']['price'] = update.message.text
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —Å–æ—Å—Ç–æ—è–Ω–∏–µ):")
    return OFFER_RECEIVING_DESCRIPTION

async def offer_description_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['offer']['description'] = update.message.text
    data = context.user_data['offer']
    summary = (
        f"{EMOJI_ORDER} *–ü–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏:*\n"
        f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"‚Ä¢ {EMOJI_LINK} –°—Å—ã–ª–∫–∞: {data.get('product_link')}\n"
        f"‚Ä¢ {EMOJI_PRICE} –¶–µ–Ω–∞: {data.get('price')}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:"
    )
    keyboard = [
        [InlineKeyboardButton(f"{EMOJI_OK} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_offer"),
         InlineKeyboardButton(f"{EMOJI_CANCEL} –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(summary, reply_markup=reply_markup, parse_mode="Markdown")
    return OFFER_CONFIRMATION

async def offer_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = context.user_data.get('offer')
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO offers (admin_id, category, photo_file_id, product_link, price, description)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (
        ADMIN_ID,
        data.get('category'),
        data.get('photo_file_id'),
        data.get('product_link'),
        data.get('price'),
        data.get('description')
    ))
    offer_id = cursor.lastrowid
    conn.commit()
    conn.close()
    offer_link = f"https://t.me/{BOT_USERNAME}?start=offer_{offer_id}"
    await query.edit_message_text(text=f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! {EMOJI_OK}\n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {offer_link}")
    context.user_data.pop('offer', None)
    return ConversationHandler.END

async def offer_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.pop('offer', None)
    await query.edit_message_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ------------- –†–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ –∑–∞—è–≤–∫–µ -------------
async def admin_decision(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data  # "accept_15" –∏–ª–∏ "reject_15"
    action, order_id = data.split("_", 1)
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    if action == "accept":
        cursor.execute("UPDATE orders SET status = ? WHERE id = ?", ("–ü—Ä–∏–Ω—è—Ç—ã–π", order_id))
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        conn.commit()
        conn.close()
        if row:
            user_id = row[0]
            await context.bot.send_message(chat_id=user_id, text="–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
        await query.answer("–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!")
    elif action == "reject":
        admin_rejections[update.effective_user.id] = order_id
        if query.message.photo:
            await query.edit_message_caption(caption="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:", reply_markup=None)
        else:
            await query.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞:")
        return
    await show_new_orders_pag(update, context, page=0)

async def rejection_reason_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id in admin_rejections:
        order_id = admin_rejections.pop(admin_id)
        reason = update.message.text
        conn = sqlite3.connect("orders.db")
        cursor = conn.cursor()
        cursor.execute("UPDATE orders SET status = ?, admin_comment = ? WHERE id = ?", ("–û—Ç–∫–∞–∑–∞–Ω", reason, order_id))
        cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
        row = cursor.fetchone()
        conn.commit()
        conn.close()
        if row:
            user_id = row[0]
            await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É.")
        await show_new_orders_pag(update, context, page=0)
    else:
        await update.message.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–∞–∑–∞.")

# ------------- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ -------------

async def admin_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤—ã–π"
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM orders WHERE status = ?", ("–ù–æ–≤—ã–π",))
    new_count = cursor.fetchone()[0]
    conn.close()

    message = f"{EMOJI_ADMIN} *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = [
        [InlineKeyboardButton(f"–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({new_count})", callback_data="new_orders_menu")],
        [InlineKeyboardButton("–í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="all_orders_all")],
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="create_ad")],
        [InlineKeyboardButton("–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", callback_data="search_orders")],
        [InlineKeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", callback_data="delete_orders_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)
    elif update.callback_query:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await update.callback_query.message.delete()
        except telegram.error.BadRequest:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        await update.callback_query.message.reply_text(message, parse_mode="Markdown", reply_markup=reply_markup)


async def delete_orders_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤)."""
    query = update.callback_query
    await query.answer()
    await show_order_delete_pag(update, context, page=0)

async def show_order_delete_pag(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("""
        SELECT id, user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status, admin_comment 
        FROM orders ORDER BY id
    """)
    orders = cursor.fetchall()
    conn.close()

    total = len(orders)
    if total == 0:
        text = "‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.delete()
        await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
        return

    page = max(0, min(page, total - 1))
    order = orders[page]
    order_id, user_id, username, first_name, category, product_name, photo_file_id, product_link, price, status, admin_comment = order

    caption = (
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id}</b>\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: {first_name} (@{username if username else '–Ω–µ—Ç username'})\n"
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üîó –°—Å—ã–ª–∫–∞: {product_link}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: {status}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {admin_comment}\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: {page+1}/{total}"
    )

    buttons = [[InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order_id}")]]
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"delete_orders_pag_{page-1}"))
    if page < total - 1:
        pagination_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"delete_orders_pag_{page+1}"))
    if pagination_buttons:
        buttons.append(pagination_buttons)
    buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_main_menu")])

    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.callback_query.message.delete()
    if photo_file_id:
        await update.callback_query.message.reply_photo(
            photo=photo_file_id, caption=caption, parse_mode="HTML", reply_markup=reply_markup
        )
    else:
        await update.callback_query.message.reply_text(
            text=caption, parse_mode="HTML", reply_markup=reply_markup
        )

async def delete_orders_pag_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤."""
    query = update.callback_query
    await query.answer()
    page = int(query.data.split("_")[-1])
    await show_order_delete_pag(update, context, page)

async def delete_order_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'."""
    query = update.callback_query
    await query.answer()
    order_id = query.data.split("_")[-1]

    conn = sqlite3.connect("orders.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM orders WHERE id = ?", (order_id,))
    row = cursor.fetchone()
    cursor.execute("DELETE FROM orders WHERE id = ?", (order_id,))
    conn.commit()
    conn.close()

    text = f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è #{order_id} —É–¥–∞–ª–µ–Ω–∞."
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="delete_orders_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.delete()
    await query.message.reply_text(text=text, reply_markup=reply_markup)

    if row:
        user_id = row[0]
        await context.bot.send_message(chat_id=user_id, text=f"–í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")



# ------------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è -------------
async def main():
    init_db()
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(new_order_callback, pattern=r"^new_order$"),
                      CommandHandler('order', order_start)],
        states={
            CHOOSING_CATEGORY: [CallbackQueryHandler(category_chosen_callback, pattern=r"^category_")],
            RECEIVING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name_received)],
            RECEIVING_PHOTO: [MessageHandler(filters.PHOTO, photo_received),
                              MessageHandler(filters.ALL & ~filters.COMMAND, photo_received)],
            RECEIVING_PRODUCT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, product_link_received)],
            RECEIVING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, price_received)],
            CONFIRMING_ORDER: [CallbackQueryHandler(confirm_order_callback, pattern="^confirm_order$"),
                               CallbackQueryHandler(cancel_order_callback, pattern="^cancel_order$")]
        },
        fallbacks=[CommandHandler('cancel', cancel_order_callback)]
    )

    offer_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(lambda u, c: offer_start(u, c), pattern=r"^create_ad$"),
                      CommandHandler('createoffer', offer_start)],
        states={
            OFFER_RECEIVING_CATEGORY: [CallbackQueryHandler(offer_category_callback, pattern=r"^offer_category_")],
            OFFER_RECEIVING_PHOTO: [MessageHandler(filters.PHOTO, offer_photo_received),
                                    MessageHandler(filters.ALL & ~filters.COMMAND, offer_photo_received)],
            OFFER_RECEIVING_PRODUCT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_product_link_received)],
            OFFER_RECEIVING_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_price_received)],
            OFFER_RECEIVING_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, offer_description_received)],
            OFFER_CONFIRMATION: [CallbackQueryHandler(offer_confirm_callback, pattern="^confirm_offer$"),
                                 CallbackQueryHandler(offer_cancel_callback, pattern="^cancel_offer$")]
        },
        fallbacks=[CommandHandler('cancel', offer_cancel_callback)]
    )

    offer_order_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(confirm_order_offer_callback, pattern="^confirm_order_offer$"),
                      CallbackQueryHandler(cancel_order_offer_callback, pattern="^cancel_order_offer$")],
        states={},
        fallbacks=[]
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(order_conv)
    application.add_handler(offer_conv)
    application.add_handler(offer_order_conv)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏ —Ä–µ–∂–∏–º–æ–≤
    application.add_handler(CallbackQueryHandler(admin_main_menu, pattern=r"^admin_main_menu$"))
    application.add_handler(CallbackQueryHandler(new_orders_menu, pattern=r"^new_orders_menu$"))
    application.add_handler(CallbackQueryHandler(show_new_orders_list, pattern=r"^new_orders_list$"))
    application.add_handler(CallbackQueryHandler(new_orders_pag_callback, pattern=r"^new_orders_pag_\d+$"))
    application.add_handler(CallbackQueryHandler(all_orders_all_menu, pattern=r"^all_orders_all$"))
    application.add_handler(CallbackQueryHandler(show_orders_by_user, pattern=r"^orders_by_user_\d+$"))
    application.add_handler(CallbackQueryHandler(change_status_menu, pattern=r"^change_status_\d+$"))
    application.add_handler(CallbackQueryHandler(set_status_callback, pattern=r"^set_status_\d+_.+"))
    application.add_handler(CallbackQueryHandler(admin_decision, pattern=r"^(accept|reject)_"))
    application.add_handler(CallbackQueryHandler(search_orders_prompt, pattern=r"^search_orders$"))
    application.add_handler(CallbackQueryHandler(my_orders_callback, pattern=r"^my_orders$"))
    application.add_handler(CallbackQueryHandler(show_orders_by_user, pattern=r"^orders_by_user_\d+(_\d+)?$"))

    
    # –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ main() –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:
    application.add_handler(CallbackQueryHandler(delete_orders_menu, pattern=r"^delete_orders_menu$"))
    application.add_handler(CallbackQueryHandler(delete_orders_pag_callback, pattern=r"^delete_orders_pag_\d+$"))
    application.add_handler(CallbackQueryHandler(delete_order_callback, pattern=r"^delete_order_\d+$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
    application.add_handler(CallbackQueryHandler(note_order_prompt, pattern=r"^note_order_\d+$"))
    application.add_handler(MessageHandler(filters.Chat(ADMIN_ID) & filters.TEXT & ~filters.COMMAND, admin_text_handler))
    await application.run_polling()

if __name__ == '__main__':
    asyncio.run(main())
